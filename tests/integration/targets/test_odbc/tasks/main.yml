####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

#
# Test for proper failures without pyodbc
#
# Some of the docker images already have pyodbc installed on it
- include_tasks: no_pyodbc.yml
  when: ansible_os_family != 'FreeBSD' and ansible_os_family != 'Suse' and ansible_os_family != 'Debian'

#
# Get pyodbc installed
#
# - include_tasks: install_pyodbc.yml

#
# Test missing parameters & invalid DSN
#
- include_tasks: negative_tests.yml

#
# Name setup database
#
# - name: Create a user to run the tests with
#   shell: echo "CREATE USER {{ my_user }} SUPERUSER PASSWORD '{{ my_pass }}'" | psql postgres
#   become_user: "{{ pg_user }}"
#   become: True

- name: Create a table
  odbc:
    dsn: "{{ dsn }}"
    query: |
        if not exists (select * from sysobjects where name='films' and type='U')
            CREATE TABLE films (
                filmid          numeric (10,0) identity primary key,
                code        char (5) not null,
                title       nvarchar(40) not null,
                did         int not null,
                date_prod    datetime,
                kind        nvarchar(10),
                len         nvarchar(5)
            )
  register: results

- assert:
    that:
      - results is changed

- name: Allow insert on identity column
  odbc:
    dsn: "{{ dsn }}"
    query: |
        SET IDENTITY_INSERT films ON
    commit: true
  register: results

- assert:
    that:
      - results is changed

#
# Insert records
#
- name: Insert a record without params
  odbc:
    dsn: "{{ dsn }}"
    query: |
      INSERT INTO films (code, title, did, date_prod, kind, len) VALUES ('azerty', 'My First Movie', 1, '2019-01-12', 'SyFi', '02:00')
  register: results

- assert:
    that:
      - results is changed

# - name: Insert a record with params
#   odbc:
#     dsn: "{{ dsn }}"
#     query: |
#       INSERT INTO films (code, title, did, date_prod, kind, len) VALUES (?, ?, convert(int, ?), ?, ?, ?)
#     params:
#       - 'qwerty'
#       - 'My Second Movie'
#       - 2
#       - '2019-01-12'
#       - 'Comedy'
#       - '01:30'
#   register: results

# - assert:
#     that:
#       - results is changed
#       - results['row_count'] == -1
#       - results['results'] == []
#       - results['description'] == []

#
# Select data
#
- name: Perform select single row without params (do not coherse changed)
  odbc:
    dsn: "{{ dsn }}"
    query: "select * from films where code='azerty'"
  register: results

- assert:
    that:
      - results is changed
      - results is successful
      - results.row_count == 1

- name: Perform select multiple rows with params (coherse changed)
  odbc:
    dsn: "{{ dsn }}"
    query: 'select * from films where code=? or code=?'
    params:
      - azerty
      - qwerty
  register: results
  changed_when: False

- assert:
    that:
      - results is not changed
      - results is successful
      - results.row_count == 2

- name: Drop the table
  odbc:
    dsn: "{{ dsn }}"
    query: "DROP TABLE films"
  register: results

- assert:
    that:
      - results is successful
      - results is changed
      - results['row_count'] == -1
      - results['results'] == []
      - results['description'] == []
